using System;
using System.Collections.Generic;
using System.Linq;
using QuantConnect.Indicators;
using QuantConnect.Data.Market;
using Rcdb;

namespace Test {
    public class Test {
        public static int Main(string[] argv) {
            bool ok = true;

            {
                var data = new[] {1,2,3,4,5,6,7,8,9,10};
                var sma = new Rcdb.TulipIndicators.Streaming.sma(4);
                var sma_baseline = new QuantConnect.Indicators.SimpleMovingAverage(4);
                for (int i = 0; i < data.Length; i++) {
                    sma.Update(new IndicatorDataPoint(DateTime.Now.AddSeconds(i), data[i]));
                    sma_baseline.Update(new IndicatorDataPoint(DateTime.Now.AddSeconds(i), data[i]));
                    Console.Write(sma.SMA.Current.Value); Console.Write(" ");
                    if (sma.IsReady && sma.Current.Value != sma_baseline.Current.Value) {
                        Console.Write($"SMA error: expected {sma.Current.Value}, got {sma_baseline.Current.Value}\n");
                        ok = false;
                    }
                }
            }

            Console.Write("\n");

            {
                var data = new[] {1,2,3,4,5,6,7,8,9,10};
                var sma = new Rcdb.TulipIndicators.Default.sma(4);
                var sma_baseline = new QuantConnect.Indicators.SimpleMovingAverage(4);
                for (int i = 0; i < data.Length; i++) {
                    sma.Update(new IndicatorDataPoint(DateTime.Now.AddSeconds(i), data[i]));
                    sma_baseline.Update(new IndicatorDataPoint(DateTime.Now.AddSeconds(i), data[i]));
                    Console.Write(sma.SMA.Current.Value); Console.Write(" ");
                    if (sma.IsReady && sma.Current.Value != sma_baseline.Current.Value) {
                        Console.Write($"SMA error: expected {sma.Current.Value}, got {sma_baseline.Current.Value}\n");
                        ok = false;
                    }
                }
            }

            Console.Write("\n");

            {
                var high = new[] {215.23,215.68,216.82,216.87,217.12,216.04,216.17,216.13,216.04,216.3,216.7,215.74,214.32,213.59,214.69,213.39,214.31,214.64,214.53,214.08,215.32,214.98,214.42,214.62,213.93,213.19,212.99,211.1,210.24,209.89,213.19,214.77,217.1,218.31,216.7,217.27,218.28,218.14,219.06,219.27,220.18,220.79,220.76,221.56,221.48,221.44,221.82,220.73,220.25,221.4,221.74,224.67,225.7,226.53,226.96,228.34,228.23,227.81,226.08,226.02,226.57,226.45,225.74,225.72,226.73,226.59,224.89,224.83,225.83,226.75,226.58,227.75,227.07,227.45,227.1,226.75,227.4,226.78,226.8,227.0,227.31,226.81,228.08,229.57,229.71,229.59,228.2,227.6,228.59,228.1,229.55,229.33,229.66,229.39,230.95,231.77,233.07,233.71,235.14,235.16,235.09,236.69,236.54,236.9,236.79,237.31,236.95,240.32,239.57,238.61,238.12,237.77,237.64,237.24,238.02,237.86,237.24,239.44,239.2,237.97,237.36,237.61,234.61,235.34,235.04,233.92,235.81,235.81,236.52,236.51,236.03,235.58,237.39,236.04,236.0,236.26,235.18,234.96,234.49,234.57,234.49,234.95,235.85,235.31,237.41,238.95,239.53,238.95,238.93,239.17,238.98,238.88,238.92,239.72,239.92,240.19,239.87,239.57,239.43,240.44,240.67,238.64,237.75,239.08,239.71,240.24,240.73,242.08,241.9,241.79,241.88,243.38,244.35,244.3,243.98,243.92,244.33,245.01,243.42,244.61,244.87,243.91,242.83,244.73,244.26,243.59,243.53,243.51,244.38,243.38,243.72,243.72,242.71,243.38,243.01,242.03,242.28,242.8,242.55,244.2,244.55,245.97,245.91,245.72,247.0,247.42,246.91,246.98,247.8,247.79,248.0,247.06,247.48,247.5,247.6,247.34,247.79,247.87,248.91,247.31,246.44,244.8,246.79,247.0,247.57,246.6,244.19,243.2,245.62,245.05,245.18,245.61,245.2};
                var low = new[] {214.01,213.62,214.71,214.04,215.36,215.04,213.99,215.33,214.74,214.19,215.99,212.58,213.01,211.21,213.03,212.17,213.27,213.6,213.11,212.76,214.48,213.98,212.93,213.08,211.71,212.36,209.6,209.23,208.46,208.38,211.3,212.38,212.34,215.22,215.32,215.72,216.8,217.42,217.92,218.29,219.0,219.73,219.75,221.01,220.36,220.17,220.31,219.15,219.26,220.42,220.66,221.38,224.26,225.37,225.76,227.0,225.37,225.89,224.67,225.08,225.88,225.77,224.92,225.21,226.0,224.27,223.84,222.73,223.88,225.61,225.48,225.9,226.42,226.01,225.59,224.96,226.69,225.8,225.9,225.41,225.97,225.27,226.27,228.51,229.01,228.76,226.41,226.32,226.94,226.82,228.46,228.54,228.72,228.31,229.52,230.62,232.05,232.16,233.39,233.85,233.93,235.51,235.83,235.56,235.41,236.35,236.02,238.37,238.21,237.73,237.01,236.76,236.4,235.74,236.59,237.24,236.19,237.29,238.1,237.03,236.32,233.58,233.05,233.6,232.96,231.61,233.14,234.73,235.27,235.68,233.91,234.56,234.54,234.43,234.64,234.73,233.34,233.77,232.51,232.88,233.08,233.18,233.78,234.13,236.61,237.81,238.35,237.98,237.93,238.2,238.3,237.7,237.78,238.68,239.17,239.04,239.15,238.13,238.67,239.45,239.63,235.75,235.43,237.27,238.82,239.51,239.93,240.96,241.45,241.16,240.64,241.64,243.08,243.76,243.12,242.83,243.17,241.95,242.38,243.58,243.29,242.36,241.63,243.48,242.99,242.41,242.64,242.47,243.05,241.31,242.23,239.96,241.58,242.21,241.7,240.34,240.56,241.76,240.85,243.3,243.76,244.31,245.33,244.67,246.01,246.47,246.18,246.28,247.16,247.13,245.68,246.13,246.53,246.72,246.37,246.64,246.97,247.37,246.83,246.06,243.7,243.75,245.55,246.16,246.45,243.09,242.2,241.83,243.55,244.16,243.75,244.39,244.09};
                var close = new[] {214.24,215.57,216.64,214.68,216.3,215.78,214.68,215.63,215.78,215.04,216.16,213.43,213.71,213.01,213.12,212.38,213.71,214.28,213.88,213.98,214.89,214.17,213.74,213.17,212.54,212.55,211.01,209.74,208.78,208.55,213.15,214.11,216.38,216.92,216.42,216.59,218.28,217.87,218.99,218.5,220.15,220.58,220.7,221.52,220.48,220.91,220.38,219.57,219.68,221.0,221.7,224.6,225.15,226.51,226.25,227.76,225.88,226.81,225.04,225.53,226.4,225.77,225.38,225.71,226.27,224.4,224.35,223.53,225.24,226.58,226.4,227.21,226.46,226.46,227.1,226.53,227.05,226.25,226.75,225.91,226.74,226.15,227.6,229.57,229.33,228.97,227.55,227.53,227.62,227.77,229.34,228.93,228.94,229.24,230.6,231.51,232.77,233.7,234.92,234.72,235.09,236.49,236.28,236.44,236.74,237.11,236.47,239.78,238.27,238.42,237.71,237.0,236.56,236.86,237.69,237.81,236.9,238.95,238.48,237.03,236.77,233.73,234.28,234.03,233.86,233.62,235.32,235.54,236.29,235.74,235.33,235.48,234.78,235.44,235.2,235.34,235.06,234.03,232.51,234.57,233.87,233.44,235.34,234.59,237.17,238.55,238.4,238.6,238.08,238.68,238.77,238.48,238.76,239.7,239.66,239.44,239.87,239.38,238.98,240.3,240.08,235.82,236.77,238.31,239.52,240.05,240.61,241.76,241.71,241.5,241.44,243.36,244.17,243.99,243.21,243.66,243.78,243.41,243.36,244.55,244.24,243.77,242.64,244.66,243.01,242.95,242.84,243.13,243.29,241.33,243.49,241.35,241.8,242.21,242.77,240.55,242.11,242.37,242.19,244.01,244.42,245.56,245.53,245.66,246.99,247.1,246.88,246.82,247.42,247.43,247.2,246.91,246.77,247.32,247.44,246.96,247.41,247.87,247.26,247.25,243.76,244.12,246.54,246.51,246.94,243.09,242.71,242.9,245.44,244.56,243.99,244.56,244.57};
                int size = high.Length;

                TradeBar[] data = new TradeBar[size];
                for (int i = 0; i < size; ++i) {
                    data[i] = new TradeBar(new DateTime(0), null, 0, (decimal)high[i], (decimal)low[i], (decimal)close[i], 0);
                }

                var kc = new Rcdb.TulipIndicators.Streaming.kc(20, 0.77);
                var kc_baseline = new QuantConnect.Indicators.KeltnerChannels(20, (decimal)0.77);
                for (int i = 0; i < data.Length; i++) {
                    try {
                        kc.Update(data[i]);
                        kc_baseline.Update(data[i]);
                    } catch (Exception e) {
                        Console.Write(e.ToString());
                        return 1;
                    }
                    Console.Write(kc.Current.Value); Console.Write(" ");
                    if (kc.IsReady && Math.Abs(kc.KC_MIDDLE.Current.Value / kc_baseline.Current.Value - 1) > (decimal)0.01) {
                        Console.Write($"kc error: expected {kc.Current.Value}, got {kc_baseline.Current.Value}\n");
                        ok = false;
                    }
                }

                if (ok) { Console.Write("\n\nALL TESTS PASSED\n"); }
            }
            return 0;
        }
    }
}
