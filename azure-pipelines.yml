name: $(Build.SourceVersion)-$(date:yyyyMMdd)-rev$(rev:.r)
trigger:
- 0.9-dev

jobs:
- job: 'Windows'
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
  - script: mkdir build
    displayName: mkdirbuild
  - script: cmake -G "Visual Studio 16 2019" -A x64 .. -Dbranch_name="$(System.PullRequest.SourceBranch)"
    displayName: 'CMake'
    workingDirectory: build
  - script: cmake --build . --config Release -j
    displayName: 'Build'
    workingDirectory: build
  - script: ctest -C Release --output-on-failure -R smoke
    displayName: 'smoke'
    workingDirectory: build
  - script: ctest -C Release --output-on-failure -R fuzzer
    displayName: 'fuzzer'
    workingDirectory: build
  - script: ctest -C Release -V -R benchmark2
    displayName: 'benchmark2'
    workingDirectory: build
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'windows_binary'
      targetPath: '$(Build.SourcesDirectory)\build\Release\indicators.dll'

- job: 'Linux'
  # Even though this is the only vmImage available (as declared),
  # we get different images by enabling/disabling this option, which is weird
  # pool:
  #   vmImage: 'ubuntu-16.04'
  steps:
  - script: |
      sudo apt-get install -y lsb-release
      lsb_release -a
      uname -a
      gcc --version
    displayName: uname
    enabled: false # reason: not needed anymore
  - script: sudo apt-get install -y libasan5 valgrind
    displayName: 'Dependencies'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
  - script: mkdir build
    displayName: mkdirbuild
  - script: cmake .. -DCMAKE_BUILD_TYPE=Debug -Dbranch_name="$(System.PullRequest.SourceBranch)" && cmake --build . -j
    displayName: 'DebugBuild'
    workingDirectory: build
    # segfault for some reason, possibly libasan can't run in the given container because of insufficient privileges
    #condition: eq(variables['Build.Reason'], 'PullRequest')
    enabled: false
  - script: LD_PRELOAD=libasan.so.5 ctest -VV --output-on-failure
    displayName: 'DebugTest'
    workingDirectory: build
    #condition: eq(variables['Build.Reason'], 'PullRequest')
    enabled: false
  - script: cmake .. -DCMAKE_BUILD_TYPE=Release -Dbranch_name="$(System.PullRequest.SourceBranch)" && cmake --build . -j
    displayName: 'ReleaseBuild'
    workingDirectory: build
  - script: ctest -C Release --output-on-failure -R smoke
    displayName: 'smoke'
    workingDirectory: build
  - script: ctest -C Release --output-on-failure -R fuzzer
    displayName: 'fuzzer'
    workingDirectory: build
  - script: ctest -C Release -V -R benchmark2
    displayName: 'benchmark2'
    workingDirectory: build
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'linux_binary'
      targetPath: 'build/libindicators.so'

# Initially copied from the Linux job
- job: 'MacOS'
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
  - script: mkdir build
    displayName: mkdirbuild
  - script: cmake .. -DCMAKE_BUILD_TYPE=Debug -Dbranch_name="$(System.PullRequest.SourceBranch)" && cmake --build . -j
    displayName: 'DebugBuild'
    workingDirectory: build
    # segfault for some reason, possibly libasan can't run in the given container because of insufficient privileges
    #condition: eq(variables['Build.Reason'], 'PullRequest')
    enabled: false
  - script: LD_PRELOAD=libasan.so.5 ctest -VV --output-on-failure
    displayName: 'DebugTest'
    workingDirectory: build
    #condition: eq(variables['Build.Reason'], 'PullRequest')
    enabled: false
  - script: cmake .. -DCMAKE_BUILD_TYPE=Release -Dbranch_name="$(System.PullRequest.SourceBranch)" && cmake --build . -j
    displayName: 'ReleaseBuild'
    workingDirectory: build
  - script: ctest -C Release --output-on-failure -R smoke
    displayName: 'smoke'
    workingDirectory: build
  - script: ctest -C Release --output-on-failure -R fuzzer
    displayName: 'fuzzer'
    workingDirectory: build
  - script: ctest -C Release -V -R benchmark2
    displayName: 'benchmark2'
    workingDirectory: build
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'macos_binary'
      targetPath: 'build/libindicators.dylib'

- job: 'Bindings'
  dependsOn:
    - Linux
    - Windows
    - MacOS
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
  - task: DownloadPipelineArtifact@1
    inputs:
      artifactName: 'linux_binary'
      targetPath: $(System.DefaultWorkingDirectory)
  - task: DownloadPipelineArtifact@1
    inputs:
      artifactName: 'windows_binary'
      targetPath: $(System.DefaultWorkingDirectory)
  - task: DownloadPipelineArtifact@1
    inputs:
      artifactName: 'macos_binary'
      targetPath: $(System.DefaultWorkingDirectory)
  - script: cmake . -DBINARIES=$(System.DefaultWorkingDirectory)
    displayName: 'CMake'
  - script: cmake --build . --config Release -j --target tulipindicators-python
    displayName: 'Python'
  - script: cmake --build . --config Release -j --target tulipindicators-lean
    displayName: 'Lean'
  - script: |
      cp bindings/python/dist/tulipindicators-*.whl '$(Build.ArtifactStagingDirectory)'
      cp bindings/lean/bin/Release/tulipindicators-lean.*.nupkg '$(Build.ArtifactStagingDirectory)'
    displayName: 'ExtractArtifacts'
  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'packages'
