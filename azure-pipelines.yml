trigger:
- 0.9-dev

jobs:
- job: 'Windows'
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
  - script: |
      copy C:\hostedtoolcache\windows\Python\3.7.2\x64\python.exe C:\hostedtoolcache\windows\Python\3.7.2\x64\python3.exe
      pip install -r requirements.txt
    displayName: 'InstallPythonRequirements'
  - task: CMake@1
    inputs:
     cmakeArgs: '-G "Visual Studio 16 2019" -A x64 ..'
  - task: CMake@1
    inputs:
     cmakeArgs: '--build . --config Release -j'
    displayName: 'Build'
  - script: |
      cd build
      setx CTEST_OUTPUT_ON_FAILURE 1
      ctest -C Release
    displayName: 'Tests'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)\build\Release\'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      contents: 'indicators.dll'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: windows_artifacts


- job: 'Linux'
  steps:
  - task: Docker@2
    inputs:
      command: build
      arguments: -t ti_image
      Dockerfile: .packaging/Dockerfile
      buildContext: .
    displayName: 'BuildDockerContainer'
  - script: |
      docker run --cap-add SYS_PTRACE ti_image
    displayName: 'RunDockerContainerTests'

  - script: |
      docker cp $(docker ps --latest -q):/tulipindicators/build_release/libindicators.so $(Build.ArtifactStagingDirectory)/libindicators.so
    displayName: 'CopyBuildArtifactsFromDockerContainer'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: linux_artifacts


# DownloadPipelineArtifact can be replaced with DownloadPipelineArtifact and also with PublishPipelineArtifacts in the task above
# Difference between 'build artifact' and 'pipeline artifact'
# https://github.com/MicrosoftDocs/vsts-docs/issues/2341#issuecomment-439483135
- job: 'GithubRelease'
  dependsOn:
  - 'Windows'
  - 'Linux'
  condition: succeeded()
  #  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  steps:
  - checkout: none
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      artifactName: windows_artifacts
      downloadPath: '$(System.ArtifactsDirectory)'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'specific'
      itemPattern: '**'
      downloadPath: '$(System.ArtifactsDirectory)'
  - task: GitHubRelease@0
    inputs:
      gitHubConnection: 'Github'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create' # Options: create, edit, delete
      target: '$(Build.SourceVersion)'
      tagSource: 'manual' # Options: auto, manual
      tag: 'test-release-tag'
      #title: # Optional
      #releaseNotesSource: 'file' # Optional. Options: file, input
      #releaseNotesFile: # Optional
      #releaseNotes: # Optional
      #addChangeLog: true # Optional
      isDraft: true
      isPreRelease: true
      assetUploadMode: 'replace' # Optional. Options: delete, replace
      assets: '$(System.ArtifactsDirectory)/**/?(*.dll|*.so)'
